from typing import List, Dict, Any
# Import typing hints to specify the expected types of variables and function parameters/returns
# List: A list of items of a specific type
# Dict: A dictionary with keys and values of specific types
# Any: Can be any type

import anthropic
# Import the anthropic package, which provides the client for Anthropic's Claude AI models

from base_agent import BaseAgent
# Import the BaseAgent abstract base class that defines the common interface for all agents

class AnthropicAgent(BaseAgent):
    """Agent for generating answers using Anthropic's Claude models."""
    # This class implements the BaseAgent interface for Anthropic's Claude models
    # It handles the specifics of communicating with the Anthropic API
    
    def __init__(self, api_key: str, model_name: str = "claude-3-5-sonnet-20240620"):
        """Initialize Anthropic agent with an API key and model name.
        
        Args:
            api_key (str): Anthropic API key
            model_name (str, optional): Model to use. Defaults to "claude-3-5-sonnet-20240620".
        """
        # Constructor method that runs when a new AnthropicAgent is created
        # Takes an API key and an optional model name
        
        super().__init__(api_key)
        # Call the parent class (BaseAgent) constructor with the API key
        # This will store the API key and validate it
        
        self.model_name = model_name
        # Store the model name as an instance variable
        
        self.client = anthropic.Anthropic(api_key=api_key)
        # Create an Anthropic client with the provided API key
        # This client will be used to make API calls to Anthropic

    async def generate_answer(self, query: str, results: List[Dict[str, Any]]) -> str:
        """Generate a comprehensive answer from retrieved results using Claude.
        
        Args:
            query (str): The user's question
            results (List[Dict[str, Any]]): Retrieved results from Pinecone
            
        Returns:
            str: The generated answer
        """
        # Implementation of the abstract method from BaseAgent
        # This method generates an answer to the user's question based on the retrieved results
        # It's marked as async, which means it's an asynchronous method that can be awaited
        
        context = self.format_context(results)
        # Format the retrieved results into a context string using the method from BaseAgent
        
        try:
            # Try to generate an answer using the Anthropic API
            
            # Since the Anthropic client doesn't have async methods, we'll use it synchronously
            # In a production environment, you might want to use asyncio.to_thread() to run this in a thread pool
            # This comment explains that the Anthropic client doesn't support async operations natively
            # In a real production app, you'd want to run this in a separate thread to avoid blocking
            
            response = self.client.messages.create(
                # Make an API call to create a message
                model=self.model_name,
                # Specify which model to use (e.g., "claude-3-5-sonnet-20240620")
                max_tokens=1000,
                # Set the maximum number of tokens (words/parts of words) in the response
                system="You are a helpful assistant that provides comprehensive answers based on the retrieved information. Cite your sources when appropriate.",
                # The system message sets the behavior of the assistant
                # This content tells the model to act as a helpful assistant and cite sources
                messages=[
                    # Provide a list of messages that define the conversation
                    {"role": "user", "content": f"Based on the following information, please provide a comprehensive answer to this question: '{query}'\n\nRetrieved Information:\n{context}"}
                    # The user message contains the user's question and the context
                    # This content includes the user's question and the formatted context
                ]
            )
            # The API call returns a response object with the generated message
            
            return response.content[0].text
            # Extract the text content of the first (and only) message in the response and return it
            # This is the actual answer generated by the model
            
        except Exception as e:
            # If there's an error during the API call
            print(f"Error generating answer with Claude: {e}")
            # Print the error message for debugging
            
            return "I couldn't generate an answer based on the retrieved information."
            # Return a fallback message to the user 